{"meta":{"title":"YuXiang Bao's Blog","subtitle":"分享计算机学习知识，来看看吧🥳","description":"鲍宇翔的个人博客","author":"Yuxiang Bao","url":"https://ethanbao27.github.io","root":"/"},"posts":[{"title":"2025年，我选择了前端","date":"2025-01-04T08:38:16.000Z","path":"2025/01/04/2025年，我选择了前端/","text":"往前端冲吧！ 字段 内容 Created 2025年1月4日 14:05 Tags Daily, Personal, Planning 日期 2025年1月4日 状态 完成 原始文章在我的notion笔记,也可以小红书/公众号/抖音搜索我的个人👤账号：Coding Epoch 我决定全面往前端方向努力。 看了Anthony Fu的视频，开始觉得前端的天花板也可以很高。不仅仅是可以学设计（Figma）之类的工具，这对色彩要求是挺高的。而我正好也对摄影感兴趣，所以是一个不错的契机。 前端相比后端，在工业界显然是更具有创造力和活力的，光看社区的活跃度就知道了。 为什么不是后端 后端，显然更接近传统计算机，包括还要接触到软件的底层以及硬件。因此和学校里的专业课相关性更大。我觉得在中国，大多数学生都会选择学校给出的方向。因此计算机科班显然更倾向于选择传统Java后端开发岗，SpringBoot那一套。 由上可见，介于制度以及环境种种原因，后端就业环境绝对比前端更卷，计算机科班生，就需要背诵更多的**八股文，**显然我并不认为计算机是这样的一门学科，需要靠背题来获得工作机会。这种就业市场烂尾的导向说明后端岗位的内卷以及过饱和。 大前端的趋势 前端必然有其优势，能够发展到今天，传统的FrontEnd-已经显然不是切图那么简单，性能优化，UX设计，3D渲染，都是大前端包括的部分，这些方向都是我感兴趣的方向。我天生就不喜欢学校刻板教学的古早计算机知识。 时代在变化，大多数前端工程师据我观察都发展为了自媒体+程序员的双重职业，而互联网上的后端工程师没有前端这么常见。现在这个时代是大数据+传媒时代，会传媒的人能够成为influencer，也更懂互联网潮流，自然也更有可能成功。 技术栈的爆炸 近年来前端技术栈的井喷，在我看来是行业生命力的象征。这里就不列举有哪些技术栈了，要熟练/彻底掌握它们需要一定的技术壁垒，这是不比后端更少的技术壁垒。因为后端的大部分壁垒是计算机科班。高级前端也需要科班的知识。 总而言之，我从去年7月份学习的前端，至今也有半年了，前端需要打通计算机网络+设计基础，最好还有图形学+算法+计算机底层。 而且大前端趋势也是在将Node.Js融入后端，基本上可以称为Ful Stack了。后端即将被替代，Java语言太过笨重。 速度-规模-品质 铁三角 速度-规模-品质 铁三角 还是根据Anthony Fu的博客： 开源的心理建设 软件工程告诉我们，开发速度、品质、规模只能三选二。 这个时代是快节奏的，强调快速交付。 前端开发模式是快速的，相比笨重的后端IDE，轻量级的vscode集成可以快速迭代，达到敏捷开发和立刻交付。结合AI调优，更锻炼程序员的市场眼界和洞察需求能力。 ALL-IN 前端？ 选择前端，并不代表抛弃后端。 我选择的前端，并不代表我抛弃学习BackEnd的算法和模式。相反，Node.Js的出现会让前端程序员转而投奔后端。 我选择的是快速开发原型的能力，以及敏锐的用户市场观察，以及优秀的活跃社区。历史的发展让我在2025年这个时间点选择了前端。 Bytheway，我目前还处在大三这个节点。还有很多东西要学习，包括计算机基础知识。巩固后端的基础能力也是很重要的。所以我还是会学很多后端的内容。 只是前端是学校不教的知识，因此我会更侧重于课业之余主要提升这部分的能力。 如果你赞同我的看法，欢迎小红书/抖音/微信公众号关注我的👤个人知识分享栏目：Coding Epoch 目前这个号还在起步阶段，我会陆续分享我的计算机学习心得，以及我认为有必要分享的知识点，帮助广大群众快速掌握知识。 或者可以关注我的个人博客：Ethan Bao（https://ethanbao27.github.io/）","permalink":"https://ethanbao27.github.io/2025/01/04/2025%E5%B9%B4%EF%BC%8C%E6%88%91%E9%80%89%E6%8B%A9%E4%BA%86%E5%89%8D%E7%AB%AF/","excerpt":"","categories":[{"name":"思考","slug":"思考","permalink":"https://ethanbao27.github.io/categories/%E6%80%9D%E8%80%83/"}],"tags":[{"name":"思考","slug":"思考","permalink":"https://ethanbao27.github.io/tags/%E6%80%9D%E8%80%83/"}]},{"title":"TaiwindCSS基本使用","date":"2024-12-14T15:55:24.000Z","path":"2024/12/14/Taiwind css基本使用/","text":"Taiwindcss 用于react 的application ui组件库 Installation 不使用React 创建tailwind.config.js file和download 12npm install -D tailwindcssnpx tailwindcss init 在配置文件中添加模板文件路径 12345678/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */module.exports = &#123; content: [&quot;./src/**/*.&#123;html,js&#125;&quot;], theme: &#123; extend: &#123;&#125;, &#125;, plugins: [],&#125; 在主css文件添加@taiwind 指令 123@tailwind base;@tailwind components;@tailwind utilities; 完成，可以在html中使用taiwind添加class类名了 如果使用Vite驱动框架： 1npm install tailwindcss@next @tailwindcss/vite@next 在vite.config.ts： 12345678import &#123; defineConfig &#125; from &#x27;vite&#x27;;import tailwindcss from &#x27;@tailwindcss/vite&#x27;;export default defineConfig(&#123; plugins: [ tailwindcss() ],&#125;) 导入主css文件： 1@import &quot;tailwindcss&quot;; 使用React 12345678910/** @type &#123;import(&#x27;tailwindcss&#x27;).Config&#125; */module.exports = &#123; content: [ &quot;./src/**/*.&#123;js,jsx,ts,tsx&#125;&quot;, ], theme: &#123; extend: &#123;&#125;, &#125;, plugins: [],&#125; 在css中： 123@tailwind base;@tailwind components;@tailwind utilities; bg color 不同灰度级的背景色调色盘 css类:bg-black/white/slate(偏蓝灰)-(100-950),gray, zinc(纯灰),neutral, stone,red,orange,amber,lime.... 设置不透明度：e.g. bg-sky-500/100,75,50 其他状态：hover:b-cyan-600 w w-4 代表1rem w-1 0.25rem w-px 使用像素 w-1/2 分数设置百分比 w-full 全宽 w-screen 视口宽度 min-w- 最小宽度 媒体查询md:min-w-0 在中等屏幕尺寸下应用 h 与w同理 h-dvh 动态视口高度 h-lvh 最大视口高度 h-svh 最小 size 与w，h同理，同时设置wh text xs，sm，base，lg，xl，2xl，4xl font-bold rounded =border 同text flex flex设置为弹性布局 flex-row flex-col设置主轴 flex-wrap 换行 justify-center 沿主轴居中 justify-between/around/evenly items-center... gap 设置子元素艰巨 m 设置margin mx-4 my-4 水平和垂直方向 mt mr mb ml 上下左右方向 -m-4 负值 p 设置padding 同m transform Transform 设置变换效果 translate 平移 -x-4 -y-2 rotate-45 顺时针 scale-110 缩放1.1倍 skew-x-12 倾斜度数 transition transition 过渡 transition-colors 渐变颜色 transition-transform 变换相关属性进行过渡 duration-300 持续时间300ms ease-in/out/in-out 缓动函数 delay-200 延迟ms animation animation-ping 逐渐淡出 -bounce 弹跳动画 -spin 旋转动画 -pulse 呼吸动画 响应式 sm: md: lg: 状态类 hover: active: focus:","permalink":"https://ethanbao27.github.io/2024/12/14/Taiwind%20css%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"","categories":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ethanbao27.github.io/tags/css/"}]},{"title":"计算机网络考试复习（详细版）","date":"2024-11-03T13:13:40.000Z","path":"2024/11/03/计算机网络考试复习/","text":"计算机网络总复习 第一章 概述 计算机网络：结点node（计算器、交换机、路由器）+链路link 功能：数据通信、资源共享 Internet TCP/IP ISP 局域网与广域网 电路交换：突发式传输、适用低频 传输时间少、有序到达、但要建立连接、不灵活、利用率低、无差错控制 报文交换：无需连接、存储转发、利用率较高、差错控制、重传代价高 无需连接、有序到达、但转发时延高 分组交换：无需连接、存储转发、分组定长（拆分为多个分组）、重传代价低 更加灵活，前面两种的折中、利用率非常高、传输时间少、支持差错控制、但需要携带很多额外控制信息、且不是有序到达 网络分类 WAN、MAN（城域网）、LAN、PAN（个域网） 广播、点对点 总线型（争用问题）、环形、星型（点对点）、网状（灵活但控制复杂线路成本高） 公用网、专用网 有线网、无线网 性能指标 bps、kbps、Mbps、Gbps、Tbps （按照\\[10^3\\]递增） 速率（数据率、比特率、数据传输率）bps 带宽：某信道允许通过的最高数据率 bps 或者表示 信号频带范围 Hz 吞吐量：某个网络或节点、信道单位时间内的实际通过的数据量（实际的综合数据率）B 时延：数据一端传送到另一端所需的时间 发送时延/传输时延=\\(\\frac{数据长度(bit)}{发送速率(bit/s)}\\)：将数据推向信道所花费的时间（准备过程） 传播时延=\\(\\frac{信道长度(m)}{电磁波在信道中的传播速度(m/s)}\\)：电磁波在信道中传播一定的距离所花费的时间（传播过程） 处理时延：受网络负载、路由器性能等诸多因素影响（一般不考虑） 排队时延：数据排队进入、发出路由器所花的时间 总时延=发送时延+传播时延+处理时延+排队时延 时延带宽积（bit）：单向传播时延x带宽 往返时延RTT：从发送方发送完数据，到发送方收到来自接收方的确认数据总共经历的时间 信道利用率：某个信道有百分之多少的时间是有数据通过的。 利用率低会浪费带宽、利用率太高会导致网络拥塞 分层结构 每一个层次负责实现一个或多个功能，上一层实体通过“接口”，请求相邻下一层的“接口”，SAP（服务访问点） 实体、对等实体、协议（水平）：通信规则集合、服务（垂直）：下层提供给上层的功能调用； OSI：7层法律标准；TCP/IP模型：事实 五层模型（教学用） PDU：协议数据单元、SDU：服务数据单元、PCI：协议控制信息 协议三要素：语法（格式）、语义、同步（时许） OSI参考模型 任务 功能 应用层 实现特定网络应用 略 表示层 解决不同主机上信息不一致的问题 数据格式转换 会话层 管理进程间会话 会话管理 传输层 实现端到端通信 复用、分用、差错控制、流量控制、连接管理、可靠数据传输 网络层 将分组从源结点转发到目的结点 路由选择、分组转发、拥塞控制、网际互联、差错控制、流量控制、连接管理、可靠数据传输 数据链路层 确保相邻节点之间的链路逻辑上无差错 差错控制、流量控制 物理层 实现相邻节点比特之间的传输 需定义电路接口参数、信号的含义/电气特性等 区别TCP/IP模型，对上可以提供无连接不可靠的IP和UDP服务，而OSI只能提供有连接、可靠的服务 第二章 物理层 任务：实现相邻节点之间比特（0或1）的传输 通信原理 信源、信宿、信号、信道 信源通过信道传输信号给信宿 信号是数据的载体，数据是信息的实体 信号有数字信号（离散，如电压正负）、模拟信号（连续，波形） 每一个信号称作一个码元 一个码元可以携带的比特数据位：一个周期内可能出现K种信号 则 \\[ 1码元=\\log_2Kbit \\] 波特Baud（率）：每秒传输几个码元(码元/秒) 比特率：每秒传输几个比特（bit/s） 通信原理中的带宽：某信道允许通过的信号频带范围 Hz（最大频率-最小频率） 噪声：对信道产生干扰，影响信号的数据传输效率。 电磁波、电压会受到环境电场、磁场的干扰 奈氏准则 没有噪声（理想低通信道）的信道来说，它的极限波特率是2W波特，其中W是信道的频率带宽Hz。 \\[ 极限比特率=2W\\log_2Kb/s \\] K为一个信号周期内可能出现的信号种类 香农定律 有噪声、带宽有限的信道，则 \\[ 极限比特率=W\\log_2(1+\\frac{S}{N})(bit/s) \\] W:信道的频率带宽（Hz） \\(\\frac{S}{N}：信噪比\\) \\[ 信噪比=\\frac{S}{N}=\\frac{信号的功率（w）}{噪声的功率（w）} \\] 用单位记录：db（分贝）分贝转比值，假设分贝为mdb： \\[ m分贝=10\\log_{10} \\frac{S}{N} \\] 编码&amp;解码、调制&amp;解调 编码：二进制数据转换为数字信号 解码：数字信号转换为二进制数据 调制：二进制数据转换为模拟信号 解调：模拟信号转换为二进制数据 有线网络适配器：编码-解码器 光猫：调制-解调器 编码技术 不归零编码（NRZ）：低0高1，中不变 归零编码（RZ）：低0高1，中归0 反向非归零编码（NRZI）：跳0不跳1看起点，中不变 曼彻斯特编码：跳0反跳1看中间，中必变 差分曼彻斯特编码；跳0不跳1看起点，中必变 调制方法 基带信号：来自信源的数字信号（需要调制后才能在某些信道上传输，例如空气） 调幅AM 有信号就调成正弦波，信号为0就无幅度 调频FM 调制正弦波频率 调相PM 调制正弦波相位 QAM（正交幅度调制）：AM+FM,即\\(1码元=\\log_2mnbit\\) QAM-16:16种码元 传输介质 导向型（有限）：双绞线、同轴电缆、光纤 非导向型：无限传输介质 单模光纤适合远距离传输（只传输一条光线）、多摸光纤适合近距离传输 以太网对有限传输介质的命名规则 速度（Mbps）+Base+介质信息 介质信息：数字则为同轴电缆，5代表最远传输距离500m，F代表光纤，T代表双绞线 电磁波：无线电波、微波（保密性差） 波长越短、频率越高、带宽越高 短波通信需要指向性强、长波不需要 物理层接口特性 机械特性：接线器形状尺寸、引脚数目、排列、固定和锁定装置 电气特性：接口电缆各条线上出现电压范围、传输速率、距离限制 功能特性：某条线上出现某一电平的电压的含义 过程特性（规程特性）；对于不同功能的各种可能事件的出现顺序 物理层设备 传输距离越远，越有可能信号失真 因此根据以太网规范限制传输距离长度 可以通过中继器（半双工通信）延续信号，将电压整形为标准的电压 集线器Hub：多端口中继器。将一个端口收到的信号整形再生后，转发到其他所有端口 不可同时发送数据，会导致冲突 Hub的N个端口对应N个网段，各网段属于同一个“冲突域” 合并Hub，组成更大的冲突域（碰撞域💥） 集线器组成的网络拓扑结构是总线型的（逻辑上），物理上是星形 连接的带宽共享 第三章 数据链路层 功能：封装成帧、透明传输、差错控制（（位错（检错编码、纠错编码）、帧错）、流量控制、可靠传输（通过滑动窗口）） 两种链路（信道）：点对点（广域网）、广播（局域网） 结点：主机、路由器 链路：两个结点之间物理通道 数据链路：两个结点之间逻辑通道（链路+协议） 帧：链路层协议数据单元 加强物理层传输原始比特流的功能，将物理连接改造成逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路 提供无确认无连接服务、有确认无连接服务、有确认面向连接服务 封装成帧 为IP数据报添加首部和尾部：帧定界 帧同步：接收方应该能区分帧的起始和终止 数据部分&lt;=MTU 透明传输：对高层不可见。 数据链路层的透明性在于能够无视传输的数据内容，但由于帧定界符会与内容混淆，所以需要实现某些规则 实现透明传输 字符填充法（传输的帧）：SOH，EOT的8bit数据 在内容部分的控制信息前加入ESC转译义字符，在接收端去除所有转义字符 零比特填充法：一连串比特连续发送，只要连续5个1，就立刻填入一个0，接收端发现5个1就把后面的0删除 差错控制 有差错就要检错，实现了检错的编码 差错的发生是由于噪声引起的：线路的电气特性导致全局性的随机噪声（热噪声）-&gt;提高信噪比、外界短暂的特点原因的局部的冲击噪声（产生差错的主要原因）-&gt;利用编码技术解决 差错 位错 0变1，1变0 帧错 丢失、重复、失序 不是所有链路都要差错检测！对于提供无确认无连接服务（通信质量好的链路）不需要 有确认：就是有重传机制，有差错检测 检错编码：奇偶校验码、循环冗余码CRC 纠错编码：海明码 物理层与数据链路层编码不一样：一个是对于单个比特的传输同步、一个是一组比特的传输过程有无差错 奇偶校验码 n-1位信息元+1位校验元 奇校验码：“1”个数为奇数 偶校验码：“1”个数为偶数 CRC循环冗余码 代传数据除以生成多项式（2进制编码），余数为FCS帧检验序列/冗余码，帧加上冗余码发送 接收方接受数据除以生成多项式，余数为0则接受，余数不为0则1丢弃 无差错接受： “凡是接收端数据链路层接受的帧，都能以非常接近于1的概率认为这些帧在传输过程中没有产生差错” 并不是无比特差错的传输，因此不是可靠传输 海明码 海明距离：码距，差错的个数 码距为n，可以检测n-1比特错 确认冗余码/校验码位数r,假设源信息有m位 \\[ 海明不等式：2^r&gt;=m+r+1 \\] 确认校验码和数据的位置，校验码放在序号为\\(2^n\\)的位置（n从1开始，在低位）（eg.1,2,4...） 1号校验码xx1（最低位1，负责1，3，5，7校验） 2号校验码x1x（第二位1，负责2，3，6，7校验） 4号校验码1xx（第三位1，负责4，5，6，7） 采用偶校验，确保每个校验码负责的对应位“1”个数为偶数，从而计算出海明码 检错并纠错，收到的数据对每个校验码对应的负责位数校验检查“1”个数，查看哪一位出错（每一位异或，再结合起来） 可靠传输与流量控制 流量控制：原因较高的发送速度与较低接受能力的不匹配 （二层流量控制是点对点的，四层流量控制是端到端） 手段：接收端发送给发送端一个窗口公告，控制发送速率，使接收方有足够的缓冲空间来接受每一个帧 停止等待协议 发送帧-确认帧-发送帧-确认帧 低效 发送窗口大小=1，接受窗口大小=1 滑动窗口协议 发送窗口（发送的数据）、接受窗口确认发送帧、发送窗口前进 后退N帧协议（GBN） 发送窗口大小&gt;1,接受窗口大小=1 选择重传协议（SR） 发送窗口大小&gt;1,接受窗口大小&gt;1 可靠传输：发送什么、收到什么 滑动传输解决的就是可靠传输与流量控制（收不下就不给确认+发送方自动重传ARQ） 停止-等待协议 除了镇内比特差错，还会出现丢包问题（帧、包、段） 不考虑全双工，仅考虑半双工 发送一个帧接受一个帧，计时器到期重传,⏰&gt;平均RTT，帧必须编号，重传则丢弃确认帧 RTT(往返时延包括发送时延)吗？一般不包括，包括传播时延+排队时延+处理时延（接收方处理返回确认消息时间） 上文是单向RTT,双向RTT是双向传播时延 \\[ 信道利用率=\\frac{L}{CT} \\] T:发送周期，从开始发送数据，到收到第一个确认帧为止（计算T：发送时延+双向RTT） L：T内发送L比特数据 C：发送方数据传输率 \\[ 信道吞吐率=信道利用率*发送方的发送速率 \\] 停止等待的信道利用率低，大部分时间发送方空闲 后退N帧协议（GBN） 解决停止-等待协议的信道利用率低问题，连续发送多个帧（流水线技术） 必须增加序号范围（防止出错） 发送方需要缓存多个分组 滑动窗口：01234567...发送的数据必须在窗口内 接受窗口只有1格，收到n号帧就返回对n帧的确认帧（也可以累计确认，发送对前n帧的确认帧） 已经发完的帧（不在窗口）、正在发送的帧，还能发送的帧（在窗口）、不能发送的帧（不在窗口） 窗口已满则不能发送，但可以放在缓存 GBN累积确认：对前n号帧的全部接受 超时计时器：后退N帧，若N帧的发送帧/确认帧没有收到，重传N帧以及后续未确认的帧，ACK一直发送ACK N-1 GBN总结：累积确认、接收方按序接受、ACK最大按序到达的帧，提高信道利用率，但是重传的效率偏低 选择重传协议（SR） 解决GBN累积确认导致的批量重传带来的效率降低问题 解决方法：设置单个确认、加大接受窗口、设置接受缓存、缓存乱序到达的帧 发送，接受窗口：N 发送窗口：发送完被确认的帧、已经发送但等待确认的、还能发送的 接受窗口：希望收到但没收到的、收到且返回确认的（在缓存中）、等待接受的 发送方：上层调用后SR发送帧或加入发送缓存、收到ACK移动窗口、超时时间后只重传一个帧 接收方：对于接受窗口内的帧来者不拒，失序的帧将被缓存并返回给发送方该帧的确认帧（收到谁确认谁），直到所有帧均被收到为止，这时可以将一批帧按需交付给上层，然后向前移动窗口 如果接收到窗口左边的帧，返回ACK； 超时重传； 帧的标识位是有限的，会出现n号帧是新帧还是旧帧的无法确认，因此窗口不能过大 \\[ W_Tmax=W_Rmax=2^{(n-1)} \\] n:帧编码个数 W:窗口大小 SR总结：数据帧逐一确认、只重传出错帧、接收方有缓存 信道划分&amp;介质访问控制 点对点链路（PPP，广域网）、广播式链路（总线以太网、局域网：星型（逻辑总线型）） 介质访问控制：采取一定措施，使得两对节点之间的通信不会发生相互干扰： 静态划分信道 频分多路复用FDM、时分多路复用TDM、波分开多路复用WDM、码分多路复用CDM 动态分配信道 轮询访问：令牌传递协议 随机访问介质：ALOHA，CSMA，CSMA/CD，CSMA/CA 多路复用技术：多个信号组合在一条物理通道 实质：广播信道组合为点对点信道 FDM 每个用户同时分带宽的各个频段 TDM 带宽一致，每个用户交替使用信道（轮流、周期性） STDM（统计时分复用） 发送到集中器的缓存，按需动态分配 WDM 本质：光波的频分复用 CDM 每个比特指定固定的m位芯片序列 发送1时候发送对应芯片序列、发送0时候发送芯片序列反码 发送的时候两个芯片序列互相正交，规格化内积为0 \\[ S·T=\\frac{1}{m}\\sum_{i=1}^{m}S_iT_i=0 \\] 两个向量到了公共信道上，线性相加，S-T 数据分离：合并的数据和原站点规格化内积，得到发送的数据，1代表1，-1代表0 \\[ S·(S-T)=1 \\] \\[ T·(S-T)=-1 \\] 以下为动态划分信道 特点：信道并非在用户通信时固定分配给用户 随机访问：所有用户可随机发送信息，发送信息时占据全部带宽。（不协调） ALOHA 每个站点不监听信道，随机重发 成功率低 时隙ALOHA 时间片同步接入信道。发生冲突则等待到下一个时间片再重发 CSMA（载波监听多路访问协议） 先听再说！ CS：发送数据前检测总线电压摆动值（检测碰撞） MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上 坚持CSMA：监听信道忙，则监听直到有空闲直接传输 如果有冲突等待一个时间再监听 非坚持CSMA：忙则不继续监听，等待一个随机时间再监听 p-坚持CSMA：对于信道空闲的时候，以p概率进行直接传输；1-p概率等到下一个时间槽再传输 忙则持续监听直到信道空闲，再以p概率发送 若冲突则等待下一个时间槽再监听并重复以上过程 CSMA/CD 先听再说，边听边说 CS：载波监听 MA：多点接入 总线型 CD：碰撞检测 监测到数据错误（碰撞💥），立刻停发数据 单程端到端传播时延：\\(\\tau\\) B监测到碰撞时间（A发送的数据到达）：\\(t=\\tau\\) 假设B发送的时间为\\(t=\\tau-\\delta\\) 则A检测到碰撞时间\\(t=2\\tau-\\delta\\) 因此，最迟需要\\(t=2\\tau\\)时间才能监测到自己发送的数据有没有和其他数据产生碰撞（两倍总线端到端时延，一个争用期） 重传时间：截断二进制指数规避算法 退避时间=基本争用期\\(2\\tau\\) 定义k为重传次数（小于10），再大就一直保持10 从\\([0,1,2^k-1]\\)中随机取出一个数r \\[ 重传退避时间=r倍的基本退避时间=2r\\tau \\] 重传16次还未成功，则抛弃此帧并向网络层报告（网络拥挤） 帧太短会再发送完毕之前检测不到碰撞，因此需要规定最小帧长：帧的传输时延至少要两倍于信号在总线上的传播时延 \\[ \\frac{帧长(bit)}{数据传输速率}\\geq2\\tau \\] 因此 \\[ 最小帧长=总线传播时延\\times数据传输速率\\times2=2\\tau\\times数据传输速率 \\] 以太网规定最小帧长64Bytes CSMA/CA 应用：无线局域网 空闲发送RTS（request to send），收到接收端的CTS（clear to send）,开始预约信道 接收端收到帧后用CRC检验，正确响应ACK帧，收到则继续发送，否则进行二进制指数退避算法重传 局域网基本概念和体系结构 多采用分布式控制和广播式通信 星形拓扑、总线型拓扑✅（以太网：逻辑总线）、环形拓扑、树形拓扑 IEEE 802标准 IEEE 802.3 以太网介质访问控制协议（CSMA/CD）及物理层技术规范 IEEE 802.5 令牌环网（单点故障） IEEE 802.8 光纤技术环网 IEEE 802.11 无线局域网(WLAN) LLC子层、MAC子层 以太网 Ethernet 使用CSMA 满足速率要求：10Mb/s~10Gb/s DIX Ethernet v2或IEEE 802.3 无连接、不可靠的服务 10BASE-T 无屏蔽双绞线 10Mb/s 100m 曼彻斯特编码 局域网通信：适配器（网卡） MAC地址 48bit 前24bit代表厂家（IEEE规定）后24位厂家自定 物理层：前导码+MAC帧 MAC层：6B目的地址（全F为广播）、6B源地址、类型（上层协议）、数据（IP数据报）46（最小帧长64B-6-6-2-4）-1500B（MTU）、FCS（帧检验序列） 高速以太网 100BASE-T 双绞线 100Mb/s 星形 可以全双工无冲突 吉比特以太网 光纤或双绞线 1Gb/s 可以全双工无冲突 10吉比特 光纤 10Gb/s 只支持全双工 无冲突 IEEE 802.11 无线局域网 2B 2B 6B 6B 6B 2B 6B 帧控制 生存周期ID RA接收端 TA发送端 DA目的地址 序列控制 SA源地址 AP无线接入点：基站 发送端和接收端：两个基站的MAC地址 BSS：基本服务集，由一个AP（Access Point接入点）和多个无线客户端 ESS：扩展服务集，多个BSS互联 基站之间有限通信 漫游：自动选择最近的AP VLAN 流量隔离（广播帧的泛洪） 用户管理 降低路由成本 将局域网内的设备划分成与物理位置无关的逻辑组，每个VLAN是单独的广播域 交换机转发表 MAC地址：端口 映射 VLAN表 VLAN id：端口 or MAC地址 贴标签：在类型前加入4B VLAN标记（后12位VID，0-4095） WAN 广域网：分组交换技术，强调资源共享 PPP：全双工链路，无流量控制和纠错，帧定界符，透明传输，多种网络层协议、多种类型链路、差错检测、检测连接状态、最大传输单元、网络层地址协商、数据压缩协商 LCP（链路控制）身份验证、NCP（网络控制） 定界符7E，转义字符7D，地址字段A FF F、A、C、协议、信息部分、FCS、F 扩展以太网 集线器：具有冲突域 网桥：转发与过滤MAC帧，能够区分网段 交换机：多端口网桥 网桥转发表自学习：地址和端口，没有就写入广播，有就转发，每隔一段时间清空 交换机自学习算法，与网桥一样 冲突域：每个结点都能收到所有被发送的帧 广播域：网络中能接收到一个结点发出广播帧的所有设备的集合 （物理层）中继器、集线器：不能隔离冲突域和广播域 （链路层）网桥、交换机：能隔离冲突域、不能隔离广播域 （网络层）路由器：都能 第四章 网络层 sdn：控制平面 IP数据报：版本、首部长度5-4B、区分服务、总长度1B、标识、标志、片偏移、TTL、协议（数据部分）、首部检验和、源地址和目标地址：32位、可选字段0～40B、填充：全0，把首部补成4B整数倍 IP数据报分片 从0开始 不能超过以太网的MTU 1500Bytes，超过则ip分片 标识：标志同一数据报的分片 标志：最低两位有意义，DF（不许分片）1禁止，0允许，MF（更多分片），1还有分片，0代表没有分片 片偏移8B：某片在原分组中的相对位置（字节序除以8Bytes） IPv4 在哪个网络？ 在网络下的哪个主机？ IP编址： 分类IP地址：32位/4B 每1B点分十进制 A类 1～126 网络号1B 主机号3B 0 最大网络数 \\(2^7-2\\) 1 126 最大主机数 \\(2^{24}-2\\) B类 128～191 网络号2B 主机号2B 10 最大网络数 \\(2^14-1\\) 128 191 最大主机数 \\(2^{16}-2\\) C类 192～223 网络号3B 主机号1B 110 最大网络数 \\(2^8-2\\) 192 223 最大主机数 \\(2^8-2\\) D类 224～239 多播地址 1110 E类 240～255 保留 1111 0.0.0.0 只可以作为源地址，本网络范围内表示主机，路由表表示默认路由 网络号全0，主机号特定值 只能源地址，表示本网范围内某个主机 255.255.255.255（全1）只能作为目的地址，广播地址，路由器不转发 网络号特定值，主机号全0 不可作为地址，表示一个网络 网络号127，主机号任何数（不全为0或者1），可以作为目的地址和源地址 环回地址 本地软件环回测试 （软件测试） 私有（内部）IP地址 A类 10.0.0.0~10.255.255.255 网段个数1 B类 172.16.0.0～172.31.255.255 网段个数16 C类 192.168.0.0～192.168.255.255 网段个数256 网络地址转换 NAT 目的：私有ip转换为公有ip NAT路由器：NAT转换表 WAN端对应LAN端的ip和端口号 子网划分和子网掩码 将主机号划分为：子网号、主机号 主机号不能全0（网络号）和全1（广播） 子网掩码与IP地址逐位相与，得到子网网络地址 直接交付（子网掩码相与查看网络号是否匹配）、间接交付（特定主机路由、路由表路径检测、默认路由、丢弃报告出错） CIDR无分类编址 IP地址后加上/，写上网络前缀的位数 CIDR子网掩码：网络前缀多少就前多少个1 超网 多个子网聚合成一个较大的子网，叫做构成超网 取网络号前n位的交集，合并成一个更大的网络 最长前缀匹配 使用CIDR，查找路由表可能得到多个匹配结果，应选择具有最长网络前缀的路由 ARP协议 知道源ip地址的MAC地址（封装的时候填入），如何知道目的ip地址的MAC地址？ 查询本地ARP高速缓存（ip：MAC），没有则使用ARP协议 主机发送ARP广播帧，目的MAC地址全F（1） 有对应MAC地址的主机响应单播ARP响应地址 “下一跳”：到下一个具有ip地址（MAC地址）的设备 10-20min更新一次ARP缓存 主机要找本网内：ARP找到本网主机MAC；找外网：ARP找到本网路由器MAC 路由器要找本网内：ARP找到本网主机MAC；找外网：ARP找到另一个路由器MAC DHCP 静态配置：ip+子网掩码+默认网关 动态ip地址分配：DHCP服务器（应用层，基于udp），地址重用 租用期：限时 主机广播DHCP发现报文（找服务器）、服务器广播DHCP提供报文（预分配ip）、主机发送DHCP请求报文（请求分配）、服务器广播DHCP确认报文（正式分配ip） ICMP 支持主机或路由器的差错（异常）报告 网络探询 五种差错报告报文：终点不可达、拥塞丢弃、超时、首部出错、重定向（改变路由：不是最好的路由） ICMP前8Bytes+IP首部+数据字段前8Bytes=ICMP差错报告报文 装入IP字段（加IP首部） 组播、特殊地址、第二个及以后分片不发送ICMP差错报告 ICMP询问报文 回送请求和回答报文 收到询问主机必须给源主机或路由器发送ICMP回送回答报文 ping 时间戳请求和回答报文 回答当前时间日期，进行时钟同步和时间测量 应用：PING、Traceroute（跟踪源点到达终点的路径） IPV6 IPv4已经耗尽，CIDR NAT治标不治本... 基本首部、有效载荷 基本首部：版本、优先级、流标签（从一个源到一个目的）、有效载荷长度、下一个首部、跳数限制、源地址（128bit）、目的地址（128bit） 删除校验和字段 删除可选字段，加入扩展首部 即插即用（自动配置），不需DHCP 首部长度是8B整数倍,IPv4是4B整数倍 IPv6只能在主机出处分片，IPv4可以在路由器和主机分片 ICMPv6：附加报文分组过大 支持资源预分配 取消协议字段，改成下一个首部字段 取消总长度字段，该用有效载荷长度字段 取消服务类型字段 表示：冒号十六进制记法 单薄、多播、任播 兼容性：双栈协议、隧道技术 回顾：路由选择协议 内部网关协议 RIP、OSPF 外部网关协议 BGP RIP 分布式、基于距离向量的路由选择 简单 每个路由器都维护从它自己到其他每一个目的网络的唯一最佳距离记录（最短跳数） 目的网络 距离 下一跳路由器 Net2 1 直接交付 Net1 2 R1 Net4 2 R3 距离=跳数=从源到目的经过路由器个数 RIP仅允许一条路由包含15个路由器，距离为16代表网络不可达 只能和相邻的路由器交换信息 路由器交换的信息是自己的路由表 30秒交换一次路由表 路由器初始只知道距离为1的下一跳，接着和相邻路由器交换并更新路由信息 经过若干次更新，达到收敛 修改相邻路由器x发来RIP报文所有表项，下一跳改为x，距离+1 对修改后RIP报文每一项： 路由表没有Net，则把该项目填入表 有Net，则查看下一跳： 下一跳是x，则用收到的项目更新路由表 不是x，则原来距离比x远则更新，否则不处理 180s内没收到x的更新路由表，则把x标记为不可达，即距离设置为16 返回 RIP报文在UDP数据报中，也就是说RIP是应用层协议 一个RIP最多20个路由信息 缺点：会造成传输错误信息的循环，好消息快收敛，坏消息慢收敛 OSPF 开放最短路径优先 Dijkstra 最短路径算法SPF 分布式链路状态协议 使用泛洪法向自治系统内所有路由器发送信息，而每一个相邻路由器又将此信息发送给所有相邻路由器 广播 发送信息是相邻路由器的路由状态 只有当链路状态发生变化时，路由器才向所有路由器泛洪 链路状态路由算法 使用Dijkstra算法算出最优选择 OSPF将自治系统划分为区域，适合大规模系统 在IP数据报内发送，是网络层协议 30min更新一次，收敛速度很快，坏消息也很快 BGP AS自治系统间交换信息，通过BGP发言人（边界路由器） 发生变化才更新 BGP交换的信息是到达某个网络所要经过的一系列AS 交换路径向量，沿某一路径\\((AS_1,AS_2)\\)可以到达网络\\(N5,N6,N7\\) BGP报文放入TCP报文的数据段，是应用层协议 BGP支持CIDR，开始运行交换整个路由表，后续之交换变化的信息 BGP-4连接 OPEN报文 UPDATE报文 KEEPALIVE报文：周期性确认连通性 NOTIFACTION报文：可以关闭连接 总结：RIP内部网关，使用广播UDP，跳数最少，距离-向量； OSPF是内部网关，使用IP，代价最低，泛洪，链路状态； BGP是外部网关，使用TCP，较好，路径-向量； IP组播 单播：点对点，源-目的 广播：点对多点，全部端口 组播（多播）：只给相同需求的主机发送，点对多点，最后一步路由器才会复制 IP组播地址：部分D类地址：224.0.0.0~239.255.255.255，一个D类地址表示一个组播组。只能用作分组的目标地址，最大努力交付UDP，不产生ICMP 组播MAC地址01-00-5E开头，后面将IP地址后23位映射到以太网地址 IGMP 让局域网上的组播路由器知道网内是否有主机参加或退出了某个组播组 使用IP数据包 发送IGMP报文给某个路由器，声明想要加入某个组播组 利用协议把关系发给其他组播路由器 周期性探询本地路由器是否是组播组的成员，经过几次探寻未响应就不再把成员关系发给其他的组播路由器 组播路由选择协议 组播转发树 移动IP 到达不同物理地点，保持ip地址不变 网络层设备 路由器：多输入/输出端口的专用计算器，任务是转发分组 根据路由选择协议构造路由表、更新维护路由表、根据转发表对分组进行转发 输入端口：接受分组、直到网络层分组排队：查表和转发（产生时延） 输出端口： 设置缓冲队列，排队输出 分组丢失原因：输入队列或输出队列缓冲区因为排队溢出 根据路由表（默认路由全0）来得出转发表 第五章 传输层 概述 端系统层次：主机独有 为应用层提供通信服务 提供进程与进程间的逻辑通信 复用和分用 报文进行差错检测 TCP、UDP 面向连接、可靠和无连接、不可靠 复用：应用层所有的应用进程都可以通过传输层再传输到网络层 分用：传输层从网络层收到数据后交付给对应应用进程 端口：传输层SAP（服务访问点），本地意义 端口号 服务端：熟知端口号0～1023，登记端口号1024～49151 客户端：49152～65536动态选择 FTP：21 TELNET：23 SMTP：25 DNS：53 TFTP：69 HTTP：80 SNMP：161 套接字Socket=（ip，port） UDP 复用分用、差错检测 无连接、最大努力交付 面向报文，长度不改变，适合一次性少量数据 首部8B，数据字段可以为0 首部：源端口号2B，目的端口号2B，UDP长度2B，UDP检验和2B 找不到目的端口号丢弃报文，发送ICMP“端口不可达”差错报告报文 UDP校验 伪首部：模仿ip首部，只有计算校验和时出现 TCP 虚连接，点对点连接（进程对进程） 可靠有序，不丢不重 全双工通信：发送缓存（准备发送的数据&amp;已发送但未收到的数据）；接受缓存（按序到达但尚未被应用程序读取的数据&amp;不按序到达的数据） 面向字节流：传输层将应用层报文视作连续字节流 首部格式 20B首部，源端口目的端口各2B，总共4B， 序号：字节流的第一个字节的顺序编号 确认号：期望收到对方下一个报文段的第一个数据字节的序号，若确认号位N，则证明到N-1点所有数据已正确收到 数据偏移（首部长度）：TCP报文段的数据起始处距离TCP报文段段起始处有多远，4B一个单位 紧急位URG：为1时在缓存区优先发送 确认位ACK：为1时确认位有效 推送位PSH：为1时接收方尽快交付接受应用进程 复位RST：为1时需要释放TCP连接 同步位SYN：表明是连接请求/连接接受报文 终止位FIN：为1时表明发送方数据已发完，要求释放连接 窗口：自己的接收窗口，可以容纳的字节流，对方应根据窗口设置发送窗口（流量控制） 检验和：检验首部+数据，检验时加上伪首部12B，第四个字段为6 紧急指针：URG=1时有意义，指出紧急数据的字节数 选项：可选，最大报文段长度MSS、窗口扩大、时间戳、选择确认... TCP连接管理 客户-服务器方式（C/S） 三次握手-四次挥手** C：连接请求报文段，无数据 SYN=1，seq=x（随机）序号 S：为TCP连接分配缓存和变量，返回确认报文段，无数据 SYN=1，ACK=1，ack=x+1（想要收到的下一个序号），seq=y（随机） C：确认的确认，可以携带报文数据，分配TCP连接缓存和变量 SYN=0（同步已经完成了），ACK=1，seq=x+1，ack=y+1（想要收到下一个序号） SYNFLOOD泛洪攻击 攻击者发送大量第一个握手数据包SYN，服务器返回ACK确认后，攻击者不进行确认。TCP连接处于挂起状态，浪费服务器资源导致崩溃 连接释放 C：发送连接释放报文段，停止发送数据 FIN=1，seq=u S：服务器送回确认报文段--半关闭状态 ACK=1，seq=v，ack=u+1 S：服务器发送完毕所有数据，发出连接释放报文段 FIN=1，ACK=1，seq=w，ack=u+1 C：客户端送回一个确认报文段，在等待时间等待计时器设置的2MSL（最长报文段寿命）后，连接彻底关闭 ACK=1，seq=u+1，ack=w+1 可靠传输 可靠：保证接收方进程从缓冲区读出的字节流与接收方一致 确认机制 直到接收方完整接收到报文段，才把缓存区中的发送报文段删除（确认报文段） 累积确认：只确认第一个丢失字节开始的报文段 重传：超时重传 RTTs（加权平均往返时间）：自适应算法计算的时间 冗余ACK（确认）：快速重传，每当比期望序号大的失序报文段到达时、发送一个冗余ACK，指明下一个期待字节的序号 可靠传输在数据链路层已经讲过 流量控制 发送方的速率放慢 TCP利用滑动窗口机制实现流量控制 接收方根据接受缓存大小，动态调整发送方发送窗口大小、即接受窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接受窗口rwnd和拥塞窗口cwnd的最小值 e.g. ACK=1，ack=201(期望收到下一个是201开头的报文段)，rwnd=300（允许发送201-500B的窗口） 然后发送窗口往前移动，发两次100B的报文段（最大报文段），然后发送窗口满了，进入等待状态，直到接收方传来新的确认以及rwnd的大小，改变窗口大小并前进，重复以上过程 如果窗口为0，启动一个持续计时器，到期后发送0窗口探测报文段，接收方给出现在的窗口值，若为0则继续等待开启计时器 拥塞控制 条件：对资源需求的\\(总和\\ge可用资源\\) 网络吞吐量随输入负荷增大而下降，因此要协调防止过多的数据注入到网络中 与流量控制区别：流量控制是点对点一对一对，拥塞控制是多对一的，有很多主机占据一条带宽 四种算法 慢开始、拥塞避免、快重传、快恢复 假设： 数据单方向传送，另一个方向只传送确认 接收方总是有足够大的缓存空间，因而发送窗口大小取决于拥塞程度 \\[ 发送窗口=Min(接受窗口rwnd,拥塞窗口cwnd) \\] 接受窗口：接收方根据接受缓存设置的值，并告诉发送方，反映接收方容量 拥塞窗口：发送方根据自己估算的网络拥塞程度设置的窗口值，反映网络当前容量 慢开始和拥塞避免 开始cwnd=1，“指数增长”，直到ssthresh门限初始值16，然后开始拥塞避免，”加法增大“，直到网络拥塞，记录下当前的cwnd拥塞窗口，设置新的ssthresh=\\(\\frac{cwnd}{2}\\),设置cwnd=1，重复慢开始流程。 快重传和快恢复 慢开始、拥塞避免“加法增大”、收到3个重复的ACK（说明冗余了），立刻执行快重传算法（比超时计时器快，节省时间），快恢复“乘法减小”，降到新的门限制为\\(\\frac{cwnd}{2}\\)，然后继续加法增大... 第六章 应用层 为应用程序的通信提供服务 定义： 应用进程交换的报文类型，请求还是响应？ 各种报文类型的语法，如报文中的各个字段机器详细描述 字段的语义、即包含在字段中的信息的含义 进程何时、如何发送报文，以及对报文进行的响应的规则 文件传输、访问和管理、电子邮件、虚拟终端、查询服务和远程作业登陆 FTP、SMTP、POP3、HTTP、DNS C/S模型、P2P模型 DNS 域名解析为ip地址 根域名 . 顶级域名 国家 cn,us,uk 通用顶级域名 com,net,org,gov,int,aero,museum,travel 基础结构域名/反向域名 arpa（ip反DNS到域名） 二级域名 类别域名 ac,com,edu,gov,mil,net,org 行政区域名 bj,js 自定义域名 三级域名 四级域名 域名树🌲表示 DNS服务器：层次划分 特殊：本地域名服务器，优先发给本地DNS Server 如果本地DNS服务器没有，查询根域名服务器 13个 但有更多分服务器 两种方式：递归查询和迭代查询 递归查询：根域名服务器知道下一级顶级域名服务器的位置，然后是权限域名服务器（只能负责一个区：每一个区是某个域名及其子域名的管理，自定义），如果还不能完成请求，那就再给出其他的权限域名服务器地址进行查询，直到查询成功逐层返回，直到给本地域名服务器 迭代查询：由本地域名服务器一个个询问（多用） FTP 文件上传、下载 C/S协议，TCP实现可靠传输 1个主进程，多个从属进程 20端口 文本模式：ASCII 二进制模式：Binary 电子邮件 SMTP客户、邮件服务器 邮件服务器间POP3，IMAP 端口25 C/S WWW和HTTP World Wide Web，大规模联机的信息储藏空间 使用统一资源定位符URL标识唯一资源HTML（超文本标记语言HyperText Markdown Language） URL格式：://:/ 通过超链接获取资源，这些资源通过超文本传输协议HTTP（HyperText Transfer Protocol） C（Browser浏览器）/S（Server） 一个服务器监听TCP端口80 浏览器分析URL，向DNS请求解析为IP地址，浏览器与服务器建立TCP连接，发送HTTP请求报文，获得HTTP响应报文，获取资源，浏览器解析并展示，释放TCP连接 HTTP 无状态、无连接（虽然有TCP连接） Cookie本地存储历史记录 连接方式： 非持久连接 TCP连接三次握手 接下来发送和接受HTTP报文，关闭TCP连接 持久连接 多次请求报文的时候不关闭TCP连接，分为流水线式（等待两个RTT）和流水线式（一个RTT） HTTP报文结构 面向文本，每一个字段都是ASCII码 请求报文：方法 URL 版本 回车行CRLF 首部字段名 值 CRLF ...CRLF 主体 响应报文：版本（HTTP/1.1 HTTP/2 HTTP/3） 状态码 短语 CRLF （状态行） 首部字段名 值 CRLF ...CRLF 主体 响应状态码： 1xx表示通知信息，请求收到或正在处理 2xx表示成功，接受 3xx表示重定向，如需完成请求需要进一步行动 4xx表示客户出错，如请求中语法错误或不能完成 5xx表示服务器出错，如服务器失效或无法完成请求","permalink":"https://ethanbao27.github.io/2024/11/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/","excerpt":"","categories":[{"name":"Network","slug":"Network","permalink":"https://ethanbao27.github.io/categories/Network/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://ethanbao27.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络协议","slug":"网络协议","permalink":"https://ethanbao27.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"复习","slug":"复习","permalink":"https://ethanbao27.github.io/tags/%E5%A4%8D%E4%B9%A0/"}]},{"title":"🛜五层体系结构协议复习","date":"2024-10-27T12:00:00.000Z","path":"2024/10/27/五层结构协议复习/","text":"🛜五层体系结构协议复习 首先我们需要了解为什么计算机网络要学习五层结构模型（TCP/IP模型），因为这更简化，便于我们了解实际网络协议，并且更贴近现实的网络组成。 而七层模型（OSI）则是由国际标准化组织ISO制定的，为网络设计提供了框架，这其实是一个概念模型，虽然在实际上不常用，但为网络设计提供了参考。 层 让我们来看一下五层和七层有哪些层次，七层实际上在五层基础上加了两层： 物理层 Physical 数据链路层 Data Link 网络层 Network 传输层 Transport 会话层 Session 表示层 Presentation 应用层 Application 对于学过计网的人来说，夹在第四和第五之间的两个层或许不太熟悉，我们来介绍一下。会话层负责建立、管理和终止应用程序之间的会话。可见主要是Socket的建立和关闭操作。因为传输层只负责端到端的可靠传输，而给上层提供接口靠的是Session层；再看看表示层，它负责处理数据表示形式，包括加密、解密、压缩和格式化，确保不同系统之间的数据能正确解释，例如SSL/TLS加密、JPEG格式转换。可见表示层更切近应用层的具体应用。 让我们回归正题，复习一下五层结构的各类协议/技术。 物理层 实现设备之间的比特传输，定义物理连接（相邻的主机到主机）的标准。 Ethernet（以太网）：有限网络的电气和信号标准。 IEEE 802.11（Wi-Fi）：定义无线局域网的通信方式。 光纤：高速骨干网传输。 Bluetooth（蓝牙）：短距离无线通信协议。 数据链路层 实现同一局域网中的节点（主机和主机）间通信，负责帧的封装、差错检测和流量控制。 Ethernet（以太网）：最广泛的局域网数据传输协议，实现以太帧（Frame）格式的定义和介质访问控制。 PPP（Point-to-Point Protocal）：提供点到点的链路传输，如电话拨号。（也有特殊格式的帧） HDLC（High-Level Data Link Control）：面向比特的链路控制协议，用来实现时钟同步。（也有特殊格式的帧） ARP（Address Resolution Protocol）：将IP地址解析为MAC地址，用于局域网通信，实现从三层到二层转换的方式。 VLAN（Virtual LAN）技术：虚拟局域网，使得相同交换机下的主机可以分配到不同子网。 网络层 实现不同网络（局域网）之间的数据传输，负责路径选择和路由转发，实现Internet上主机到主机的连接。 IP（Internet Protocol）：网络层核心，定义数据包的封装与路由，它的任务只是根据数据包标头的ip地址，将数据包从源主机传送到目标主机。 IPv4:广泛使用的协议，32位IP地址，使用ARP协议地址解析。 IPv6：128位地址，采用NDP协议。 ICMP（Internet Control Message Protocol）：用于传递网络层错误消息和状态消息，广为流传的ping指令。它是依靠IP协议的协议，IP数据包中有它。利用TTL将路由诊断信息返回到源。 IGMP（Internel Group Management Protocol）：实现IP多播。 路由协议分类 路由协议 距离向量路由协议 DVRP 距离向量路由协议（DVRP）也被称为“按跳数计算的路由算法”，其原理是：每个节点都维护到达目的节点所需的距离，每次更新将本节点到所有其他节点的距离向量发送给相邻节点，相邻节点再将其发给相邻节点……直到所有节点的距离向量被更新。最终每个节点都得到了到达目的节点的最短距离。 常见的距离向量路由协议有 RIP（Routing Information Protocol） IGRP（Interior Gateway Routing Protocol） 链路状态路由协议 LSRP 链路状态路由协议（LSRP）也被称为“基于状态的路由算法”，其原理是每个节点都把自己的链路状态信息发给相邻节点，相邻节点保存下来并传递给其它相邻节点。当所有节点都交换完成链路状态信息之后，每个节点通过计算最短路径算法得到网络的最短路径。 常见的链路状态路由协议有 OSPF（Open Shortest Path First） IS-IS（Intermediate System to Intermediate System） 静态路由协议 在静态路由协议中，网络管理员手动配置路由表，然后路由器依据配置的路由表进行数据包的转发。 静态路由协议的缺点是不灵活，不能及时响应网络拓扑结构的变化。 动态路由协议 动态路由协议可以根据网络拓扑结构的变化自动调整路由表，路由表的计算是通过运行路由协议来完成的。动态路由协议虽然比静态路由协议更复杂，但是具有灵活、自适应、可靠的优点。 常见的动态路由协议有 BGP OSPF IS-IS RIP IGRP EIGRP OSPFv3 单播、多播、组播路由协议 单播路由协议是指进行单播转发的路由协议。多播路由协议是指进行多播转发的路由协议。组播路由协议是一种组播数据包传输的路由协议，与多播路由协议类似。 内部网关协议和外部网关协议 内部网关协议（IGP）是指在一个企业或组织内部部署、用于内部路由器之间通信的协议，如RIP、IGRP、EIGRP、OSPF和IS-IS等。外部网关协议（EGP）是指在不同的自治系统之间进行路由选择的协议，如BGP,各大ISP进行连接使用的是BSP协议（使用TCP连接）。 工作原理 路由协议的工作原理可以分为四个步骤： 邻居发现 路由表建立 路由表维护 路由表选择 在选择适合特定网络环境的路由协议时，需要综合考虑网络规模、复杂性、性能需求和管理能力。通常，大型企业网络和互联网使用链路状态协议（如OSPF和IS-IS），而小型网络可能会选择距离向量协议（如RIP）。同时，BGP在连接自治系统之间的路由选择方面具有广泛的应用。 以上路由协议部分内容均为这篇华为云社区文章的原创内容，本博客仅作为个人学习使用，无抄袭意图，了解详情请点击超链接进入此博客观看。 传输层 提供端到端（port）的数据传输服务，确保数据包按顺序、无误地传输到目的主机。 TCP（Transmission Control Protocol）：面向连接、可靠的协议，提供可靠的数据传输和流量控制。适用于需要保证数据完整性的应用，如 HTTP、FTP。 UDP（User Datagram Protocol）：无连接协议，不保证数据的可靠传输，但传输速度快。适用于实时应用，如视频流、在线游戏，DNS解析也用UDP。 握手过程 SCTP（Stream Control Transmission Protocol）：同时支持多流传输的协议，适用于 VoIP 等应用。 TCP与UDP的区别之一是重传丢失的数据。在TCP协议中，每个数据包都被赋予一个唯一的序列号。数据包发送者仔细跟踪发送了哪些数据包。作为响应，接收系统发出一个ACK数据包（代表“确认”），其中包含确认收到的数据包的序列号。如果序列号不匹配或丢失，发送机器将重新发送数据包。这个过程会持续下去，直到匹配的ACK确认传输成功。 第二大区别是通过三向握手建立持久化连接。在TCP中，三向握手是一种通信机制，以确保所有数据的发送和正确接收。简而言之，这发生在三个部分： 初始化(SYN)：SYN是想要建立通信的设备发出的初始数据包。该数据包包含同步标志(SYN)和接收者的IP地址。 确认启动(SYN-ACK)：接下来，接收者发回SYN-ACK数据包，假设它已准备好并愿意进行通信。 最终确认(ACK)：一旦发送方收到SYN-ACK，就会发送最终ACK以确认有效连接。 TCP面向连接是依赖于它的错误检测和流量控制等其他功能（在后文），这些特性成为TCP面向连接的本质的支柱。 TCP错误检测和流量控制简述 应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据包大小超过 MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一个分块丢失或损坏了，只需要重新发送这一个分块，而不用重新发送整个数据包。在 TCP 协议中，我们把每个分块称为一个 TCP 段（TCP Segment）（IP是超过MTU 1500 Bytes，即以太网帧的载荷后分片，⚠️注意分片标识、偏移量、MF更多分片标识、DF禁止分片标识这些概念）。TCP段对应标识有Seq序列号（如何组装在一起）、确认号（希望接受的下一个字节的序号，累积确认机制标识以及成功接受的数据，未确认的字节等待重传）、FIN关闭连接等。 在 TCP 报文段的头部中，有一个 16 位窗口字段，用于表示接收方的缓冲区可用空间大小。窗口大小值 告诉发送方当前允许发送的未确认数据量。通过该字段，发送方可以动态调整发送速度，确保不会导致接收方的缓冲区溢出。如果接收方缓冲区剩余空间减少，它会将窗口大小缩小；如果可用空间增大，它会增大窗口大小。 应用层 为应用程序提供网络服务接口，用户可以直接使用这些协议访问网络资源。 HTTP/HTTPS（Hypertext Transfer Protocol）：用于传输网页数据，HTTPS 在 HTTP 基础上添加了加密（TLS/SSL）。 ssl1 ssl2 FTP（File Transfer Protocol）：用于文件传输，支持上传和下载功能。 SMTP（Simple Mail Transfer Protocol）：用于电子邮件发送。 POP3（Post Office Protocol 3） 和 IMAP（Internet Message Access Protocol）：用于电子邮件接收，IMAP 支持邮件同步。 DNS（Domain Name System）：将域名解析为 IP 地址。 ssh Telnet 和 SSH：用于远程登录，SSH 提供了加密的传输。 DHCP（Dynamic Host Configuration Protocol）：用于自动分配 IP 地址。 URL（uniform resource identifier，统一资源定位符） 在HTTP协议中，用来标识唯一的资源。 Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的 URL组成 访问资源的命名机制 存放资源的主机名 资源自身的名称，由路径表示，着重强调于资源。 HTTP Request http request 1234567GET /562f25980001b1b106000338.jpg HTTP/1.1Host img.mukewang.comUser-Agent Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36Accept image/webp,image/*,*/*;q=0.8Referer http://www.imooc.com/Accept-Encoding gzip, deflate, sdchAccept-Language zh-CN,zh;q=0.8 12345678POST / HTTP1.1Host:www.wrox.comUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022)Content-Type:application/x-www-form-urlencodedContent-Length:40Connection: Keep-Alivename=Professional%20Ajax&amp;publisher=Wiley HTTP Response http response 12345678GET 请求指定的页面信息，并返回实体主体。HEAD 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头POST 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。PUT 从客户端向服务器传送的数据取代指定的文档的内容。DELETE 请求服务器删除指定的页面。CONNECT HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。OPTIONS 允许客户端查看服务器的性能。TRACE 回显服务器收到的请求，主要用于测试或诊断。 关于HTTP协议，详情可参考这篇博客 SSL&amp;SSH SSH和SSL(都是网络安全协议，通过加密和认证提升两台设备间传输数据的安全性。但SSH和SSL的生效方式和服务目标存在差异。 SSH在两台设备间创建安全隧道，使这两台设备间可以安全地发送命令、传输数据等。例如，客户端通过SSH远程登录到一台服务器上，就可以安全地远程管理这台服务器，在服务器上执行想要的命令。 SSL则是使用SSL证书保证两台设备间安全地传输数据，而不是像SSH那样可以执行命令。例如，用户通过浏览器访问某安装了SSL证书且启用了HTTPS的服务器，浏览器和服务器之间可以安全地传输数据。 SSH就像一辆汽车，我们看不到这辆封闭的汽车里装载的是什么。而SSL就像一个封闭的集装箱，我们可以用不同的交通工具运输它，但看不到集装箱里装的是什么。","permalink":"https://ethanbao27.github.io/2024/10/27/%E4%BA%94%E5%B1%82%E7%BB%93%E6%9E%84%E5%8D%8F%E8%AE%AE%E5%A4%8D%E4%B9%A0/","excerpt":"","categories":[{"name":"Network","slug":"Network","permalink":"https://ethanbao27.github.io/categories/Network/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://ethanbao27.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络协议","slug":"网络协议","permalink":"https://ethanbao27.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"复习","slug":"复习","permalink":"https://ethanbao27.github.io/tags/%E5%A4%8D%E4%B9%A0/"}]},{"title":"OS：处理机调度与死锁🔒","date":"2024-10-26T05:43:00.000Z","path":"2024/10/26/chapter 3 处理机调度与死锁/","text":"处理机调度与死锁🔒 Q:如果系统只有一个cpu,有两个进程要运行.进程A的运行时间将是1小时,进程B的运行时间是1分钟.那么认为操作系统让哪个进程先运行比较合理? A：与操作系统的调度策略有关，即更重视优先级还是到来顺序、时长等因素。 调度 对处理机（CPU）资源进行分配。 调度层次 高级（作业）调度、中级（内存）调度、低级（进程）调度。 区分主要是运行频率，低级调度最频繁，也是重点。 调度等级 后备队列（Spooling Queue 或 Backup Queue）是指操作系统或系统调度过程中用于存放尚未进入内存执行的进程或任务的队列。根据实际情况，后备队列可以位于外存或与外存相关的区域，而非内存。 作业（Job）：一组需要完成的任务或程序的组合。 高级调度：决定哪些后备队列中的（外存中的）作业调入内存并创建进程与分配资源。 中级调度：决定哪些进程可参与竞争CPU。（内存-&gt;外存） 低级调度：决定哪个进程可以获得CPU。 低级调度有两种方式： 非抢占式：一直执行完成或自动阻塞。 抢占式：允许其他进程依据一定规则抢占CPU。 （1）时间片原则、（2）优先权原则 、（3）短作业（进程）优先原则 调度设计 1. 周转时间 (Turnaround Time) 作业（进程）从提交（进入时刻）到完成的时间称为该作业的周转时间 (T_i)： \\[ T_i = \\text{完成时刻} - \\text{进入时刻} \\] 2. 平均周转时间 (Average Turnaround Time) 平均周转时间为 (n) 个作业（进程）周转时间的平均值： \\[ T = \\frac{1}{n} \\left( \\sum_{i=1}^{n} T_i \\right) \\] 3. 带权周转时间 (Weighted Turnaround Time) 作业（进程）周转时间 (T_i) 与实际运行时间 (T_{si}) 之比称为该作业的带权周转时间 (W_i)： \\[ W_i = \\frac{T_i}{T_{si}} \\] 4. 平均带权周转时间 (Average Weighted Turnaround Time) 平均带权周转时间为 (n) 个作业（进程）带权周转时间的平均值： \\[ W = \\frac{1}{n} \\left( \\sum_{i=1}^{n} \\frac{T_i}{T_{si}} \\right) \\] 调度算法 根据系统的资源分配策略所规定的资源分配方法 先来先服务（FCFS） ​ 作业调度：从后背队列选择一个或多个最先进入队列的作业 短作业（进程）优先（SF） 从就绪队列中选择CPU执行时间最短的作业 高响应比优先（HRN） ​ 选择待调度的作业中响应比最高的 \\[ R_p = \\frac{W_i + S_i}{S_i} \\] ​ Rp:响应比 ​ Wi：已等待时间 ​ Si：要求服务时间 最高优先权（HPF） ​ 选择优先权最高的，其中又分为： ​ 静态优先权 ​ 动态优先权 时间片轮转（RR） ​ 每次为一个进程执行一个时间片T 多级队列调度 ​ 将就绪队列分为多种不同队列，不同队列使用不同调度算法 ​ 多级反馈队列调度算法 ​ 设置多个就绪队列，从高到低赋予不同优先级，每个队列采用RR算法，时间片长度依次增加。 死锁 概述 死锁是指多个进程因竞争资源而造成的一种僵局，若无外力作用，这些进程都将永远不能再向前进。 产生原因 资源竞争 当两个或以上进程需要两个或以上资源(非剥夺性资源or临时性资源)： 可剥夺性资源 非剥夺性资源 临时性资源：由某进程产生，由另一进程使用的资源。（信号量） 进程推进非法 请求和释放资源的顺序不当。 产生死锁必要条件 互斥条件：请求的资源为临界资源 临界资源（Critical Resource）：指多个进程或线程在同一时间只能由一个进程使用的资源。对这种资源的访问必须受到严格的控制，以防止数据不一致或竞争问题的发生。典型的临界资源包括共享内存、文件、数据库等。 可见，访问临界资源必须要有同步或互斥机制（同步：信号量，互斥：锁）！！ 请求和保持条件：申请新资源，保持旧资源 不剥夺条件：已获得的资源，在使用完之前，不被外力剥夺。 环路等待条件：互相等待资源 处理死锁的基本方法 预防死锁：设置限制条件，破坏死锁产生 避免死锁：资源分配的动态方法 检测死锁：采取措施，解除死锁 解除死锁：剥夺资源或撤销进程回收♻️资源 银行家算法🏦 安全序列 安全状态，是指系统能按某种进程顺序(P1, P2, …，Pn)(称〈P1, P2, …, Pn〉序列为安全序列)，来为每个进程Pi分配其所需资源，直至满足每个进程对资源的最大需求，使每个进程都可顺利地完成。如果系统无法找到这样一个安全序列，则称系统处于不安全状态。 ​ • 可用资源：目前系统中剩余的可用资源数量。 ​ • 最大需求：每个进程所需的最大资源量。 ​ • 已分配资源：每个进程当前占用的资源量。 需求 = 最大需求 - 已分配资源 要找到一个安全序列，需要按照银行家算法，依次寻找一个可以满足当前可用资源条件的进程，完成该进程后，释放其资源，增加可用资源。重复这个过程，直到所有进程都完成。 算法实现 核心：根据系统是否处于安全状态，来决定分配资源与否。 对于银行家算法的具体实现主要由以下几个数据结构： 1、可利用资源向量Available： 一个含有m个元素的数组，其中的每一个元素代表一类可利用的资源数目 2、最大需求矩阵Max： 一个n×m的矩阵，它定义了系统中n个进程中的每一个进程对m类资源的最大需求 3、分配矩阵Allocation： 一个n×m的矩阵，它定义了系统中每一类资源当前已分配给每一进程的资源数 4、需求矩阵Need： 一个n×m的矩阵，用以表示每一个进程还需的各类资源数 Need［i,j］=Max［i,j］-Allocation［i,j］ 银行家算法 设Requesti是进程Pi的请求向量，如果Requesti［j］=K，表示进程Pi需要K个Rj类型的资源。当Pi发出资源请求后，系统按下述步骤进行检查： 如果Requesti［j］≤Need［i,j］，便转向步骤2；否则认为出错，因为它所需要的资源数已超过它所宣布的最大值。 如果Requesti［j］≤Available［j］，便转向步骤(3)；否则， 表示尚无足够资源，Pi须等待。 系统试探着把资源分配给进程Pi，并修改下面数据结构中的数值： ① Available［j］∶=Available［j］-Requesti［j］; ② Allocation［i,j］∶=Allocation［i,j］+Requesti［j］; ③ Need［i,j］∶=Need［i,j］-Requesti［j］; 系统执行安全性算法，检查此次资源分配后，系统是否处于安全状态。若安全，才正式将资源分配给进程Pi，以完成本次分配；否则， 将本次的试探分配作废，恢复原来的资源分配状态，让进程Pi等待。 对于系统整体安全状态的检查，引入安全性算法，核心实现如下： 设置两个向量：① 工作向量Work: 它表示系统可提供给进程继续运行所需的各类资源数目，它含有m个元素，在执行安全算法开始时，Work∶=Available; ② Finish: 它表示系统是否有足够的资源分配给进程，使之运行完成。开始时先做Finish［i］∶=false; 当有足够资源分配给进程时， 再令Finish［i］∶=true。 从进程集合中找到一个能满足下述条件的进程：  ① Finish［i］=false; ② Need［i,j］≤Work［j］； 若找到， 执行步骤(3)， 否则，执行步骤(4)。 当进程Pi获得资源后，可顺利执行，直至完成，并释放出分配给它的资源，故应执行： Work［j］∶=Work［i］+Allocation［i,j］; Finish［i］∶=true; go to step 2; 如果所有进程的Finish［i］=true都满足， 则表示系统处于安全状态；否则，系统处于不安全状态。 银行家算法的缺点如下： 1.很少有进程能够在运行前就知道其所需资源的最大值 2.而且进程数也不是固定的，往往在不断地变化（如新用户登录或退出） 3.原本可用的资源也可能突然间变成不可用（如磁带机可能坏掉） 4.银行家算法的开销较大，实时性不是很好 解除死锁 利用死锁定理 死锁解除 对于死锁的解除，即（1）剥夺资源，(2) 撤消进程。 实用而又简便的方法是： 逐个撤消那些代价最小的进程，或者，使撤消进程的数量最少，直至获得为解除死锁所需要的足够可用的资源。","permalink":"https://ethanbao27.github.io/2024/10/26/chapter%203%20%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E4%B8%8E%E6%AD%BB%E9%94%81/","excerpt":"","categories":[{"name":"OS","slug":"OS","permalink":"https://ethanbao27.github.io/categories/OS/"}],"tags":[{"name":"复习","slug":"复习","permalink":"https://ethanbao27.github.io/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"操作系统","slug":"操作系统","permalink":"https://ethanbao27.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"死锁","slug":"死锁","permalink":"https://ethanbao27.github.io/tags/%E6%AD%BB%E9%94%81/"}]},{"title":"最常见的图像压缩算法：JPEG","date":"2024-10-22T08:22:03.000Z","path":"2024/10/22/最常见的图像压缩算法：JPEG/","text":"DIP-JPEG图像压缩 为什么JPEFG有用 人类眼镜的细胞对图像的感知程度，亮度比色度感知强烈的多。 因此减少人类眼镜感知较弱的区域，即减少颜色的差异，就可以实现压缩。 压缩步骤 首先需要进行色彩空间转换，每一个像素都有RGB的红绿蓝叠加，算法需要通过一个固定的公式算出Y（亮度）、Cb（蓝色色度）、Cr（红色色度）。 进行色度缩减取样，很多数据会被删除。将蓝色和红色色度分量层的像素按照2x2像素成一个区块这样划分。然后计算每个区块的平均值，然后缩小图像（4:2:0），使得含有1个平均值的由4个像素组成的区块只占一个像素的空间。于是那些我们👀眼睛不易感知的红蓝色度信息量shrink to 1/4 size，而亮度（luminance）保持不变。（网上流行的包浆图就是这么来的） 考虑一下刚才的两步，计算之前SIZE=1+1+1=3.0，计算之后为SIZE=1+1/4+1/4=1.5，图像已经变为原来大小的一半了。 当我们查看图像时，会放大图像到原始尺寸，根据YCbCr重新计算RGB（可能发生变化） 接下来的两个步骤是重点，进行离散余弦变换（Discrete Cosine Transform,DCT ）和量化（Quantiaztion）。这利用了人眼不擅长感知高频率的图像信息的原理，即对于细节并不能精确感知。如阴影变化，和摄影中失焦的场景。以上两个步骤会遍历图像各个部分，并找到由高频率色度或亮度的像素频繁出现的区域，然后将这些人眼很难感知的像素删除。对于三个图层中的每一个图层进行以下步骤（以亮度涂层举例）： 将整个图像按照8x8像素划分成许多区域，称为“区块”。每个区块因此有64像素，每个像素用0～255的数值表示。如果是亮度图层就是代表亮度值。 减去128来改变各个亮度数值，这样取值范围就变成了-128～-127。（亮度图-128为黑色，127为白色） 每一个区块内，我们可以先找到64个8x8基本图像（正弦函数的频率域图）并且每个图像都会有一个计算得出的DCT系数，原始图像可以通过计算出的每个基本图像✖️它对应的系数后再叠加64次得出。（具体的数学公式笔者也不了解，请自行网上查阅） DCT不能压缩或缩小图像，但下一个步骤，量化可以 DCT后我们会有一个常数表，我们要把其中的各个值除上对应量化表中的各个值，并四舍五入取整。 量化过程 ​ 量化表右下角数值偏高，是人眼不擅长感知德高频数据。而数值 较小的左上角是人眼更容易区分的样式所在。 ​ 在刚才的步骤中，我们舍弃了人眼无法感知的数据，针对色度， 我们会采用一个数值更大的量化表，舍去更多的颜色数据。 小结 从本质上讲，整个余弦变换+量化的过程，一整张图像都使用了一组相同的64个基础图像和两个量化表：一个用于亮度，另一个用于色度。以便将8x8的像素区块转换为几个数字和一大堆的0。 编码 游程编码 在这一步骤中，我们列出所有区块中的亮度与色度数值（更改后）。然而是这样的顺序： 游程编码 因为这样子更可能找到一连串的非0数字。 接下来，在我们列出的数字中，使用游程编码Run length encoding algorithm，列出我们有几个0。这样只有几十个数字的列表显然比0～255的方法压缩的多。 哈夫曼编码 Huffman Encoding ​ 这种独立编码也运用在H.264视频压缩算法中（也被称为高级视频编码，AVC），是目前Youtube上传视频推荐的视频压缩算法。它使用了色度所见取样或色度抽样技术，以及离散余弦变换和量化技术的一些变种。 ​ 这里对哈夫曼编码进行简述，感兴趣的可以查阅资料自行了解。 需要对待编码的数据中每个符号出现的频率进行统计。这些频率将用于构建哈夫曼树。 哈夫曼树是一种二叉树，其中每个叶子节点代表一个符号，且路径长度与符号的频率相关。构建哈夫曼树的步骤如下： ​ 1. 初始化：将所有符号视为独立的节点，并按照频率从小到大排序。 ​ 2. 合并最小频率的两个节点：将频率最小的两个节点合并为一个新的父节点，其频率为两个子节点频率之和。 ​ 3. 重复合并：将新节点加入节点列表中，重新排序，重复步骤2，直到所有节点合并成一棵树。 根据哈夫曼树生成哈夫曼表，从根节点到每个叶子节点的路径决定了该符号的哈夫曼编码。通常，向左分支记为0，向右分支记为1。 graph TD Root[100] Root --> A[45] Root --> CBFED[55] CBFED --> CB[25] CBFED --> FED[30] CB --> C[12] CB --> B[13] FED --> FE[14] FED --> D[16] FE --> F[5] FE --> E[9] classDiagram class HuffmanTable { +Symbol : A +Code : 0 +Symbol : B +Code : 101 +Symbol : C +Code : 100 +Symbol : D +Code : 111 +Symbol : E +Code : 1101 +Symbol : F +Code : 1100 } H.264 ​ 然而，H.264显然更加复杂，因为它不是像JPEG那样压缩单一的静态图像。每30帧使用iFrame（JPEG），而其他29帧使用预测或双向预测,只对差异和运动进行编码，同时使用先前解码的帧作为参考。 重构图片过程 让我们回到JPEG，首先我们执行哈夫曼解码,根据哈夫曼表将编码变回DCT系数，例如： 12Compressed Data: 110100010...Decoded DCT Coefficients: [16, 11, -10, ...] 并且分解游程编码（disassemble），然后把一连串的数字按照去交错（De-Zigzag）的方式重新排列为8x8矩阵。 接下来，我们执行反量化，通俗来讲就是讲各个值乘以量化表（之前讲过的那两张表，之前是除法），然后将所得常数乘以相应的基础图像（基础图像也是一开始就有的，之前也是除法），并将所有结果图像叠加在一起。 将蓝色跟红色色度图像放大，并将亮度和色度值重新转换为RGB色彩空间。 智能手机相机的拍摄照片至少有十几万像素，JPEG在几秒钟内就要完成压缩和解压缩，真是不可思议！ JPEG的缺点 有时候，你可以选择压缩的程度，而这会改变量化表的数值，这种四舍五入做除法的算法，如果压缩量变大，那么就会有更多的0，图像也会因此变得更小。 然而，如果压缩量过大，图像会出现artifacts，或者说块效应。它们看起开就像方块边缘的模糊斑点（类似于基础图像，就是离散余弦变换表中的特征，图像有很明显的横线或竖线）。 其次，压缩会去除高频数据，使得图像的精确度降低。 然而，这也是一种优点，因为没有一个相机能够做到完美对焦，所以很难分辨出未压缩和压缩的图像之间的区别。 但是，压缩矢量图的表现不佳，直线的压缩会出现锯齿。因为JPEG依靠基础图像来重建直线。 总结 JPEG仍是使用量最多的图片压缩算法，因为它古老、为人熟知、无版权。 但还有很多其他图像格式，也具有很好的压缩能力。","permalink":"https://ethanbao27.github.io/2024/10/22/%E6%9C%80%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95%EF%BC%9AJPEG/","excerpt":"","categories":[{"name":"DIP","slug":"DIP","permalink":"https://ethanbao27.github.io/categories/DIP/"}],"tags":[{"name":"JPEG","slug":"JPEG","permalink":"https://ethanbao27.github.io/tags/JPEG/"},{"name":"数字图像处理","slug":"数字图像处理","permalink":"https://ethanbao27.github.io/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"算法","slug":"算法","permalink":"https://ethanbao27.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图像压缩","slug":"图像压缩","permalink":"https://ethanbao27.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/"},{"name":"哈夫曼编码","slug":"哈夫曼编码","permalink":"https://ethanbao27.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"}]},{"title":"Three.Js简介","date":"2024-10-21T08:33:28.000Z","path":"2024/10/21/Three-Js简介/","text":"Three.Js 介绍 Three.js由Ricardo Cabello在2010四月于GitHub首次发布。 JavaScriptの3Dライブラリ”three.js”を使って遊 ... Three.js是一个跨浏览器的使用JavaScript函数库或API来在网页浏览器中创建和展示三维计算机图形的开源通用 3D 代码库。Three.js使用WebGL渲染图形，也可通过插件使用 WebGPU（实验性）、SVG 和 CSS3D 渲染器。源代码托管在GitHub。 Installation 每个 three.js 项目至少需要一个 HTML 文件来定义网页，以及一个 JavaScript 文件来运行你的 three.js 代码。下面的结构和命名选择并非必需，但为了保持一致性，本指南将在全文中使用。 index.html 12345678910111213&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;My first three.js app&lt;/title&gt; &lt;style&gt; body &#123; margin: 0; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;script type=&quot;module&quot; src=&quot;/main.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; main.js 123import * as THREE from &#x27;three&#x27;;... public/ public/ 文件夹有时也被称为 \"静态（static）\"文件夹，因为其中包含的文件会原封不动地推送到网站上。纹理（textures）、音频和 3D 模型通常会放在这里。 Creating a Scene 1234567891011121314151617181920212223import * as THREE from &quot;three&quot;const scene = new THREE.Scene()const camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,0.1,1000) const renderer =new THREE.WebGLRenderer()renderer.setSize(window.innerWidth,window.innerHeight)document.body.appendChild(renderer.domElement)const geometry = new THREE.BoxGeometry(1,1,1)const material = new THREE.MeshBasicMaterial(&#123;color:0x00ff00&#125;)const cube = new THREE.Mesh(geometry,material)scene.add(cube)camera.position.z=5function animate() &#123; requestAnimationFrame(animate) cube.rotation.x += 0.01 cube.rotation.y += 0.02 renderer.render(scene,camera)&#125;animate() 以上这行代码创建了一个不断旋转的正方体。 效果图 解释代码 我们花一点点时间来解释一下这里发生了什么。我们现在建立了场景、相机和渲染器。 three.js 里有几种不同的相机，在这里，我们使用的是 PerspectiveCamera（透视摄像机）。 第一个参数是视野角度（FOV）。视野角度就是无论在什么时候，你所能在显示器上看到的场景的范围，它的单位是角度(与弧度区分开)。 第二个参数是长宽比（aspect ratio）。 也就是你用一个物体的宽除以它的高的值。比如说，当你在一个宽屏电视上播放老电影时，可以看到图像仿佛是被压扁的。 接下来的两个参数是近截面（near）和远截面（far）。 当物体某些部分比摄像机的远截面远或者比近截面近的时候，该这些部分将不会被渲染到场景中。或许现在你不用担心这个值的影响，但未来为了获得更好的渲染性能，你将可以在你的应用程序里去设置它。 接下来是渲染器。这里是施展魔法的地方。除了我们在这里用到的 WebGLRenderer 渲染器之外，Three.js 同时提供了其他几种渲染器，当用户所使用的浏览器过于老旧，或者由于其他原因不支持 WebGL 时，可以使用这几种渲染器进行降级。 除了创建一个渲染器的实例之外，我们还需要在我们的应用程序里设置一个渲染器的尺寸。比如说，我们可以使用所需要的渲染区域的宽高，来让渲染器渲染出的场景填充满我们的应用程序。因此，我们可以将渲染器宽高设置为浏览器窗口宽高。对于性能比较敏感的应用程序来说，你可以使用 setSize 传入一个较小的值，例如 window.innerWidth/2 和 window.innerHeight/2，这将使得应用程序在渲染时，以一半的长宽尺寸渲染场景。 如果你希望保持你的应用程序的尺寸，但是以较低的分辨率来渲染，你可以在调用 setSize 时，将 updateStyle（第三个参数）设为 false。例如，假设你的canvas标签现在已经具有了 100% 的宽和高，调用 setSize(window.innerWidth/2, window.innerHeight/2, false) 将使得你的应用程序以四分之一的大小来进行渲染。 最后一步很重要，我们将 renderer（渲染器）的dom元素（renderer.domElement）添加到我们的 HTML 文档中。这就是渲染器用来显示场景给我们看的canvas元素。 要创建一个立方体，我们需要一个 BoxGeometry（立方体）对象. 这个对象包含了一个立方体中所有的顶点（vertices）和面（faces）。未来我们将在这方面进行更多的探索。 接下来，对于这个立方体，我们需要给它一个材质，来让它有颜色。Three.js 自带了几种材质，在这里我们使用的是 MeshBasicMaterial。所有的材质都存有应用于他们的属性的对象。在这里为了简单起见，我们只设置一个color属性，值为 0x00ff00，也就是绿色。这里所做的事情，和在 CSS 或者 Photoshop 中使用十六进制（hex colors）颜色格式来设置颜色的方式一致。 第三步，我们需要一个 Mesh（网格）。 网格包含一个几何体以及作用在此几何体上的材质，我们可以直接将网格对象放入到我们的场景中，并让它在场景中自由移动。 默认情况下，当我们调用 scene.add() 的时候，物体将会被添加到 (0,0,0) 坐标。但将使得摄像机和立方体彼此在一起。为了防止这种情况的发生，我们只需要将摄像机稍微向外移动一些即可。 渲染场景 现在，如果将之前写好的代码复制到HTML文件中，你不会在页面中看到任何东西。这是因为我们还没有对它进行真正的渲染。为此，我们需要使用一个被叫做“渲染循环”（render loop）或者“动画循环”（animate loop）的东西。 1function animate() &#123; requestAnimationFrame( animate ); renderer.render( scene, camera ); &#125; animate(); 在这里我们创建了一个使渲染器能够在每次屏幕刷新时对场景进行绘制的循环（在大多数屏幕上，刷新率一般是60次/秒）。如果你是一个浏览器游戏开发的新手，你或许会说“为什么我们不直接用 setInterval 来实现刷新的功能呢？”当然啦，我们的确可以用 setInterval，但是，requestAnimationFrame 有很多的优点。最重要的一点或许就是当用户切换到其它的标签页时，它会暂停，因此不会浪费用户宝贵的处理器资源，也不会损耗电池的使用寿命。 使立方体动起来 在开始之前，如果你已经将上面的代码写入到了你所创建的文件中，你可以看到一个绿色的方块。让我们来做一些更加有趣的事 —— 让它旋转起来。 将下列代码添加到 animate() 函数中 renderer.render 调用的上方： 1cube.rotation.x += 0.01; cube.rotation.y += 0.01; 这段代码每帧都会执行（正常情况下是60次/秒），这就让立方体有了一个看起来很不错的旋转动画。基本上来说，当应用程序运行时，如果你想要移动或者改变任何场景中的东西，都必须要经过这个动画循环。当然，你可以在这个动画循环里调用别的函数，这样你就不会写出有上百行代码的 animate 函数。 结果 祝贺你！你现在已经成功完成了你的第一个 three.js 应用程序。虽然它很简单，但现在你已经有了一个入门的起点。","permalink":"https://ethanbao27.github.io/2024/10/21/Three-Js%E7%AE%80%E4%BB%8B/","excerpt":"","categories":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"javascript框架","slug":"javascript框架","permalink":"https://ethanbao27.github.io/tags/javascript%E6%A1%86%E6%9E%B6/"},{"name":"WebGL","slug":"WebGL","permalink":"https://ethanbao27.github.io/tags/WebGL/"},{"name":"渲染引擎","slug":"渲染引擎","permalink":"https://ethanbao27.github.io/tags/%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/"}]},{"title":"axios简介","date":"2024-10-21T08:25:25.000Z","path":"2024/10/21/axios简介/","text":"axios axios axios对原生ajax进行了封装，简化书写，快速开发，用于发送异步请求。 查看 axios docs 定义 Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。 用例 发起一个 GET 请求 1234567891011121314151617181920212223242526272829303132333435363738394041const axios = require(&#x27;axios&#x27;);// 向给定ID的用户发起请求axios.get(&#x27;/user?ID=12345&#x27;) .then(function (response) &#123; // 处理成功情况 console.log(response); &#125;) .catch(function (error) &#123; // 处理错误情况 console.log(error); &#125;) .finally(function () &#123; // 总是会执行 &#125;);// 上述请求也可以按以下方式完成（可选）axios.get(&#x27;/user&#x27;, &#123; params: &#123; ID: 12345 &#125; &#125;) .then(function (response) &#123; console.log(response); &#125;) .catch(function (error) &#123; console.log(error); &#125;) .finally(function () &#123; // 总是会执行 &#125;); // 支持async/await用法async function getUser() &#123; try &#123; const response = await axios.get(&#x27;/user?ID=12345&#x27;); console.log(response); &#125; catch (error) &#123; console.error(error); &#125;&#125; 注意: 由于async/await 是ECMAScript 2017中的一部分，而且在IE和一些旧的浏览器中不支持，所以使用时务必要小心。 发起一个 POST 请求 12345678910axios.post(&#x27;/user&#x27;, &#123; firstName: &#x27;Fred&#x27;, lastName: &#x27;Flintstone&#x27; &#125;) .then(function (response) &#123; console.log(response); &#125;) .catch(function (error) &#123; console.log(error); &#125;);","permalink":"https://ethanbao27.github.io/2024/10/21/axios%E7%AE%80%E4%BB%8B/","excerpt":"","categories":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"ajax","slug":"ajax","permalink":"https://ethanbao27.github.io/tags/ajax/"},{"name":"异步","slug":"异步","permalink":"https://ethanbao27.github.io/tags/%E5%BC%82%E6%AD%A5/"},{"name":"javascript","slug":"javascript","permalink":"https://ethanbao27.github.io/tags/javascript/"}]},{"title":"计算机科学分支 CS Map","date":"2024-10-20T16:02:46.371Z","path":"2024/10/21/计算机分支/","text":"Computer Science Map 计算机科学基础理论（Theroy） 1. 计算性理论 computability theroy 2. 算法 algorithm 3. 信息论 information theroy 4. 密码学 cryptography 5. 其他（逻辑、图论、计算几何、自动机理论、量子计算、并行编程、形式化方法、数据结构） 计算机工程（engineering） 1. 处理机调度 2. 计算机体系结构 architecure 3. 软件与编程语言 4. 编译器 compilers 5. 操作系统 operating systems 6. 软件工程 software engineering 7. 网络 networking 8. 数据管理 data management 9. 性能 performance 10. 图形学 graphics 应用（Applications） 1. 优化 optimization 2. 布尔可满足性问题 boolean satisfiability（SAT） 3. 人工智能 artificial intelligence 4. 机器学习 machine learning 计算机视觉 computer vision 图像处理技术 image processing techniques 自然语言处理 natural language processing 5. 大数据 big data 6. 物联网 Internet of things 7. hacking 8. 计算科学 computational science 9. 超算 supter computing 10. 人机交互 human computer interacting 11。 机器人学 robitics","permalink":"https://ethanbao27.github.io/2024/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%86%E6%94%AF/","excerpt":"","categories":[{"name":"计算机科学","slug":"计算机科学","permalink":"https://ethanbao27.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"}],"tags":[{"name":"计算机科学导航","slug":"计算机科学导航","permalink":"https://ethanbao27.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%88%AA/"}]}],"categories":[{"name":"思考","slug":"思考","permalink":"https://ethanbao27.github.io/categories/%E6%80%9D%E8%80%83/"},{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Network","slug":"Network","permalink":"https://ethanbao27.github.io/categories/Network/"},{"name":"OS","slug":"OS","permalink":"https://ethanbao27.github.io/categories/OS/"},{"name":"DIP","slug":"DIP","permalink":"https://ethanbao27.github.io/categories/DIP/"},{"name":"计算机科学","slug":"计算机科学","permalink":"https://ethanbao27.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/"}],"tags":[{"name":"思考","slug":"思考","permalink":"https://ethanbao27.github.io/tags/%E6%80%9D%E8%80%83/"},{"name":"前端","slug":"前端","permalink":"https://ethanbao27.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"css","slug":"css","permalink":"https://ethanbao27.github.io/tags/css/"},{"name":"计算机网络","slug":"计算机网络","permalink":"https://ethanbao27.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"},{"name":"网络协议","slug":"网络协议","permalink":"https://ethanbao27.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"},{"name":"复习","slug":"复习","permalink":"https://ethanbao27.github.io/tags/%E5%A4%8D%E4%B9%A0/"},{"name":"操作系统","slug":"操作系统","permalink":"https://ethanbao27.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"死锁","slug":"死锁","permalink":"https://ethanbao27.github.io/tags/%E6%AD%BB%E9%94%81/"},{"name":"JPEG","slug":"JPEG","permalink":"https://ethanbao27.github.io/tags/JPEG/"},{"name":"数字图像处理","slug":"数字图像处理","permalink":"https://ethanbao27.github.io/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"},{"name":"算法","slug":"算法","permalink":"https://ethanbao27.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"图像压缩","slug":"图像压缩","permalink":"https://ethanbao27.github.io/tags/%E5%9B%BE%E5%83%8F%E5%8E%8B%E7%BC%A9/"},{"name":"哈夫曼编码","slug":"哈夫曼编码","permalink":"https://ethanbao27.github.io/tags/%E5%93%88%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81/"},{"name":"javascript框架","slug":"javascript框架","permalink":"https://ethanbao27.github.io/tags/javascript%E6%A1%86%E6%9E%B6/"},{"name":"WebGL","slug":"WebGL","permalink":"https://ethanbao27.github.io/tags/WebGL/"},{"name":"渲染引擎","slug":"渲染引擎","permalink":"https://ethanbao27.github.io/tags/%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/"},{"name":"ajax","slug":"ajax","permalink":"https://ethanbao27.github.io/tags/ajax/"},{"name":"异步","slug":"异步","permalink":"https://ethanbao27.github.io/tags/%E5%BC%82%E6%AD%A5/"},{"name":"javascript","slug":"javascript","permalink":"https://ethanbao27.github.io/tags/javascript/"},{"name":"计算机科学导航","slug":"计算机科学导航","permalink":"https://ethanbao27.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E5%AF%BC%E8%88%AA/"}]}